//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniProject_Ef
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AssignmentDbEntities1 : DbContext
    {
        public AssignmentDbEntities1()
            : base("name=AssignmentDbEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<admin_details> admin_details { get; set; }
        public virtual DbSet<booking> bookings { get; set; }
        public virtual DbSet<cancellation> cancellations { get; set; }
        public virtual DbSet<train> trains { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<Nullable<double>> InsertBookingAndUpdateTrainWithDates(string customername, Nullable<int> train_no, string @class, Nullable<System.DateTime> date_of_travelling, Nullable<int> total_seats, ObjectParameter totalamount)
        {
            var customernameParameter = customername != null ?
                new ObjectParameter("customername", customername) :
                new ObjectParameter("customername", typeof(string));
    
            var train_noParameter = train_no.HasValue ?
                new ObjectParameter("train_no", train_no) :
                new ObjectParameter("train_no", typeof(int));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var date_of_travellingParameter = date_of_travelling.HasValue ?
                new ObjectParameter("date_of_travelling", date_of_travelling) :
                new ObjectParameter("date_of_travelling", typeof(System.DateTime));
    
            var total_seatsParameter = total_seats.HasValue ?
                new ObjectParameter("total_seats", total_seats) :
                new ObjectParameter("total_seats", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("InsertBookingAndUpdateTrainWithDates", customernameParameter, train_noParameter, classParameter, date_of_travellingParameter, total_seatsParameter, totalamount);
        }
    
        public virtual int InsertCancellationAndUpdateTrainWithRefund(Nullable<int> cancel_id, Nullable<int> booking_id, string customer_name, string @class, Nullable<System.DateTime> cancel_date, Nullable<int> no_of_seats, string remarks)
        {
            var cancel_idParameter = cancel_id.HasValue ?
                new ObjectParameter("cancel_id", cancel_id) :
                new ObjectParameter("cancel_id", typeof(int));
    
            var booking_idParameter = booking_id.HasValue ?
                new ObjectParameter("booking_id", booking_id) :
                new ObjectParameter("booking_id", typeof(int));
    
            var customer_nameParameter = customer_name != null ?
                new ObjectParameter("customer_name", customer_name) :
                new ObjectParameter("customer_name", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var cancel_dateParameter = cancel_date.HasValue ?
                new ObjectParameter("cancel_date", cancel_date) :
                new ObjectParameter("cancel_date", typeof(System.DateTime));
    
            var no_of_seatsParameter = no_of_seats.HasValue ?
                new ObjectParameter("no_of_seats", no_of_seats) :
                new ObjectParameter("no_of_seats", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCancellationAndUpdateTrainWithRefund", cancel_idParameter, booking_idParameter, customer_nameParameter, classParameter, cancel_dateParameter, no_of_seatsParameter, remarksParameter);
        }
    
        public virtual ObjectResult<string> RegisterUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegisterUser", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> UserLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserLogin", usernameParameter, passwordParameter);
        }
    }
}
